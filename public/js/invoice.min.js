let lineTotal,
	ppu = document.querySelectorAll(".ppu"),
	units = document.querySelectorAll(".units"),
	row = document.querySelectorAll(".line-item"),
	totalEl = document.querySelectorAll(".total"),
	invoiceTotal = document.querySelector(".invoice-total"),
	totalArray = [],
	archiveBtn = document.querySelector(".archiveBtn"),
	unarchiveBtn = document.querySelector(".unarchiveBtn"),
	deleteBtn = document.querySelector(".delete-item-btn"),
	paidBtn = document.querySelector(".paidBtn"),
	unpaidBtn = document.querySelector(".unpaidBtn"),
	paidBadge = document.querySelector("#paid"),
	unpaidBadge = document.querySelector("#unpaid");
function getTotal() {
	for (var a = 0; a < row.length; a++)
		(lineTotal = ppu[a].innerHTML * units[a].innerHTML),
			totalEl[a].append(lineTotal),
			console.log("Line Total: ", lineTotal),
			totalArray.push(lineTotal);
	(totalSum = totalArray.reduce((c, a) => c + a, 0)),
		invoiceTotal.append(totalSum),
		console.log("Invoice Total: ", totalSum);
}
async function deleteItem(a) {
	console.log("item id: ", a);
	const b = await fetch(`/api/item/${a}`, {
		method: "DELETE",
		body: JSON.stringify({ itemId: a }),
		headers: { "Content-Type": "application/json" },
	});
	b.ok ? document.location.reload() : alert(b.statusText);
}
async function markArchived(a) {
	a.preventDefault();
	const b = window.location.toString().split("/")[
			window.location.toString().split("/").length - 1
		],
		c = await fetch(`/api/invoice/${b}`, {
			method: "PUT",
			body: JSON.stringify({ archived: !0 }),
			headers: { "Content-Type": "application/json" },
		});
	c.ok
		? (alert("Successfully archived invoice!"),
		  window.location.replace("/archived"))
		: alert(c.statusText);
}
async function markUnarchived(a) {
	a.preventDefault();
	const b = window.location.toString().split("/")[
			window.location.toString().split("/").length - 1
		],
		c = await fetch(`/api/invoice/${b}`, {
			method: "PUT",
			body: JSON.stringify({ archived: !1 }),
			headers: { "Content-Type": "application/json" },
		});
	c.ok
		? (alert("Successfully restored invoice!"),
		  window.location.replace(`/dashboard/invoice/${b}`))
		: alert(c.statusText);
}
async function markPaid(a) {
	a.preventDefault();
	const b = window.location.toString().split("/")[
			window.location.toString().split("/").length - 1
		],
		c = await fetch(`/api/invoice/${b}`, {
			method: "PUT",
			body: JSON.stringify({ isPaid: !0 }),
			headers: { "Content-Type": "application/json" },
		});
	c.ok
		? (document.location.reload(), alert("invoice marked as paid"))
		: alert(c.statusText);
}
async function markUnpaid(a) {
	a.preventDefault();
	const b = window.location.toString().split("/")[
			window.location.toString().split("/").length - 1
		],
		c = await fetch(`/api/invoice/${b}`, {
			method: "PUT",
			body: JSON.stringify({ isPaid: !1 }),
			headers: { "Content-Type": "application/json" },
		});
	c.ok
		? (alert("invoice marked as unpaid"), document.location.reload())
		: alert(c.statusText);
}
getTotal(),
	archiveBtn.addEventListener("click", markArchived),
	unarchiveBtn.addEventListener("click", markUnarchived),
	paidBtn.addEventListener("click", markPaid),
	unpaidBtn.addEventListener("click", markUnpaid),
	document.querySelector("#invoice-table").addEventListener("click", (a) => {
		if (a.target.classList.contains("delete-item-btn")) {
			a.preventDefault();
			let b = a.target.getAttribute("data-item-id");
			deleteItem(b);
		}
	});
